# shellcheck disable=SC2148
PLATFORM=$(uname -s)
export PLATFORM
PROC=$(uname -m)
export PROC

alias cagelab-monitor="tmuxp load $HOME/.config/tmuxp/cagelab-monitor.yaml"
alias cagelab-reset="systemctl --user restart cogmoteGO && systemctl --user restart theConductor"
alias cagelab-zsh="ln -svf $HOME/Code/Setup/config/zshrc $HOME/.zshrc && ln -svf $HOME/Code/Setup/config/zsh-* $HOME && ln -svf $HOME/Code/Setup/config/aliases $HOME && source $HOME/.zshrc"

if [[ -f $(which eza) ]]; then
	alias lls='eza --icons=auto -al -r -s size'
	alias llt='eza --icons=auto -al -r -s time'
	alias lll='eza --icons=auto -al@'
	alias ll='eza --icons=auto -al'
	alias dir='eza --icons=auto -al'
	alias ls='eza --icons=auto'
elif [[ $PLATFORM = 'Darwin' ]]; then 
	alias la='ls -alGhF@'
	alias las='ls -alGhFeLH'
	alias ll='ls -alFGh'
	alias lls='-alFGhS@s'
	alias llt='ls -alFGht'
	alias dir='ls -alfG'
else
	alias ls='ls --color=auto'
	alias ll='ls -AFlh'
	alias la='ls -A'
	alias l='ls -CF'
	alias dir='ls -alfG'
	alias cls='clear; ls'
	alias l.='ls -d .[^.]*' #only show .dot files
fi

alias installmicromamba='"${SHELL}" <(curl -L micro.mamba.pm/install.sh)'
alias updateKitty='curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin &&
ln -sf ~/.local/kitty.app/bin/kitty ~/.local/kitty.app/bin/kitten ~/.local/bin/ &&
cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/ &&
cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/ &&
sed -i "s|Icon=kitty|Icon=$(readlink -f ~)/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop &&
sed -i "s|Exec=kitty|Exec=$(readlink -f ~)/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop &&
echo "kitty.desktop" > ~/.config/xdg-terminals.list'

alias smbfix='kill `pidof gvfsd-smb-browse`'
alias hping='httping -K'
alias e=elvish
alias mm='micromamba'
alias gst='git status'
alias gca='git commit --all'
alias gdt='git difftool'
alias resetorigin='git fetch origin && git reset --hard origin/master && git clean -f -d'
alias resetupstream='git fetch upstream && git reset --hard upstream/master && git clean -f -d'
alias untar='tar -zxvf '
alias wget='wget -c '
alias makepassword='openssl rand -base64 15'
alias grep='grep --color=auto'
alias gzip='gzip -9n' # set strongest compression level as ‘default’ for gzip
alias ping='ping -c 5' # ping 5 times ‘by default’
[[ -x $(which prettyping) ]] && alias ping='prettyping -c 5 --nolegend'
[[ -x $(which bat) ]] && alias cat='bat'
[[ -x $(which kitty) ]] && alias kssh='kitty +kitten ssh'

# Enable aliases to be sudo’ed
#alias sudo='sudo '

# howdoi is a python pip install
h() { howdoi "$@" -c -n 5; }

# fuzzy finder
if [[ -x $(which fzf) ]]; then
	alias preview="fzf --preview 'bat --color \"always\" {}'"
	# add support for ctrl+o to open selected file in VS Code
	export FZF_DEFAULT_OPTS="--bind='ctrl-o:execute(code {})+abort'"
fi

# Sizes of Folder Contents
alias sizes='du -sh * | sort -h'

# Download - it downloads the specified file
alias dl='curl -C - -O'
# This one is really useful - it shares the current directory open in terminal
# It shares this at the location localhost:8000
alias sharedir='python -m SimpleHTTPServer'

# Get readable list of network IPs
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
#My IP address
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
# Enhanced WHOIS lookups
alias whois="whois -h whois-servers.net"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# File size
alias fs="stat -f \"%z bytes\""

# ROT13-encode text. Works for decoding, too! ;)
alias rot13='tr a-zA-Z n-za-mN-ZA-M'

# URL-encode strings
alias urlencode='python3 -c "import urllib.parse, sys; print(urllib.parse.quote(sys.argv[1]))"'
alias urldecode='python3 -c "import urllib.parse, sys; print(urllib.parse.unquote(sys.argv[1]))"'

# Minimal additional TeX packages for Pandoc templates with BasicTeX
alias updateTeX='tlmgr option repository https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive/tlnet
tlmgr update --self
tlmgr update --all
latexmk csquotes pagecolor relsize mdframed needspace sectsty \
titling titlesec preprint layouts glossaries tabulary soul xargs todonotes \
mfirstuc xfor wallpaper datatool substr adjustbox collectbox \
sttools wrapfig footnotebackref fvextra zref \
libertinus libertinus-fonts libertinus-otf threeparttable \
elsarticle algorithms algorithmicx siunitx bbding biblatex biber \
stackengine xltabular booktabs orcidlink \
ltablex cleveref makecell threeparttablex tabu multirow \
changepage marginnote sidenotes environ fontawesome5 tcolorbox framed pdfcol \
tikzfill luacolor lua-ul xpatch selnolig \
lua-visual-debug lipsum svg newfile'

#manage bash/zsh
if [[ -x $(which code) ]]; then 
	alias edit='code -nw';
else
	alias edit='nvim';
fi
alias reloadbash='clear;source ~/.bashrc'
alias reloadzsh='clear;source ~/.zshrc'
alias editbash='edit ~/.bashrc ~/.bash_profile ~/.dotfiles/env ~/.dotfiles/config ~/.dotfiles/aliases && reloadbash'
alias editzsh='edit ~/.zshrc ~/.dotfiles/config ~/.dotfiles/aliases && reloadzsh'
alias usezsh='chsh -s $(which zsh) && reloadzsh'
alias usebash='chsh -s $(which bash) && reloadbash'

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

if [[ $PLATFORM = 'Darwin' ]]; then 
	# conflicts with MATLAB PTB, so we must manually [dis|en]able
	alias karabinerLoad='sudo kextload /Library/Application\ Support/org.pqrs/Karabiner-VirtualHIDDevice/Extensions/org.pqrs.driver.Karabiner.VirtualHIDDevice.v061000.kext; \
	sudo launchctl load -F /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_grabber.plist; \
	sudo launchctl load -F /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_observer.plist; \
	launchctl load -F /Library/LaunchAgents/org.pqrs.karabiner.karabiner_console_user_server.plist'
	alias karabinerUnload='launchctl unload -F /Library/LaunchAgents/org.pqrs.karabiner.karabiner_console_user_server.plist; \
	sudo launchctl unload -F /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_grabber.plist; \
	sudo launchctl unload -F /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_observer.plist; \
	sudo launchctl unload -F  /Library/Application\ Support/org.pqrs/Karabiner-Elements/bin/karabiner_kextd; \
	sudo launchctl unload -F  /Library/Application\ Support/org.pqrs/Karabiner-Elements/bin/karabiner_session_monitor; \
	sudo killall -v karabiner_kextd; \
	sudo killall -v karabiner_session_monitor; \
	sudo killall -v karabiner_observer; \
	sudo killall -v karabiner_grabber; \
	sudo killall -v karabiner_console_user_server; \
	sudo killall -v Karabiner-Menu; \
	sudo killall -v Karabiner-Elements; \
	sudo kextunload /Library/Application\ Support/org.pqrs/Karabiner-VirtualHIDDevice/Extensions/org.pqrs.driver.Karabiner.VirtualHIDDevice.v061000.kext;'

	alias zerotierUnload='sudo killall "ZeroTier One"; sudo launchctl unload /Library/LaunchDaemons/com.zerotier.one.plist'
	alias zerotierLoad='sudo launchctl load /Library/LaunchDaemons/com.zerotier.one.plist; sleep 3; open "/Applications/ZeroTier One.app"'
	alias zerotierUninstall='sudo /Library/Application\ Support/ZeroTier/One/uninstall.sh'

	alias randomAddress="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'"
	alias randomiseMAC="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//' | xargs sudo ifconfig en0 ether"
	alias dequarantine='xattr -d com.apple.quarantine '
	alias lock="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
	alias stfu="osascript -e 'set volume output muted true'"
	alias pumpitup="sudo osascript -e 'set volume 10'"
	alias hax="growlnotify -a 'Activity Monitor' 'System error' -m 'WTF R U DOIN'"
	alias findbig='sudo -v; sudo find -xf /.Trashes /Volumes /Library /private /Temp* -type f -size +200000 -print0 | sudo xargs -0 ls -lohdSr'
	alias measurebig='for f in /Volumes /.Spotlight* /.Trashes /Library/Logs /private/ {var/{log,spool,db,vm,tmp},tmp} /Temp*; do sudo du -hsx "$f"; done'
	alias lsregister='/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister'
	alias lsrebuild='/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -v -kill -r -domain local -domain system -domain user'
	alias servicesrebuild='/System/Library/CoreServices/pbs -flush'
	alias profop='sudo fs_usage -w -f filesys -e Terminal Parallels mds nmbd Dock WindowServer ATSServer Quicksilver > ~/Desktop/operafs.txt' #profile opera file system usage
	alias airscan="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s"
	#alias kernel64='sudo systemsetup -setkernelbootarchitecture x86_64'
	#alias kernel32='sudo systemsetup -setkernelbootarchitecture i386'
	alias top='TERM=vt100 top'
	alias reveal='open --reveal'
	alias nitenite='exec pmset sleepnow'

	# Quicklook and Spotlight
	alias ql='qlmanage -p'
	alias quicklook='qlmanage -p'
	alias spotlighter='mdfind -onlyin `pwd`'

	# `wifi on` to turn wifi on, and `wifi off` to turn it off
	alias wifi="networksetup -setairportpower $(networksetup -listallhardwareports | grep -A 2 'Hardware Port: Wi-Fi' | grep 'Device:' | awk '{print $2}')"

	#Some hardcore maintainance
	#alias rebuildkexts="sudo touch /System/Library/Extensions"
	alias rebuilddyld="sudo update_dyld_shared_cache -force"

	# Flush DNS cache
	alias flushdnsolder="sudo dscacheutil -flushcache"
	alias flushdnsmavericks="dscacheutil -flushcache; sudo killall -HUP mDNSResponder"
	alias flushdnsold="sudo discoveryutil udnsflushcaches; sudo discoveryutil mdnsflushcache"
	alias flushdns="sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache;say macOS DNS cache cleared"

	#useful info
	alias mymemory="top -l 1 | awk '/(pagein|Mem)/'; vm_stat"
	alias kext3="kextstat | grep -v com.apple" #find 3rd party kernel extensions
	alias mydisplay="ioreg -lw0 | grep IODisplayEDID | sed \"/[^<]*</s///\" | xxd -p -r | strings -6" #find id of display
	alias whywakeme="syslog | grep -i \"Wake reason =\"" #find why the machine woke up
	alias powerlog="pmset -g pslog" #log of active power/sleep info
	alias batterypercent="pmset -g batt | egrep '([0-9]+\%).*' -o --colour=auto | cut -f1 -d';'"

	# Empty the Trash on all mounted volumes and the main HDD
	# Also, clear Apple’s System Logs to improve shell startup speed
	alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"

	#Clean font caches
	alias fontclean="sudo atsutil databases -remove"

	# Show/hide hidden files in Finder
	alias show-dotfiles="defaults write com.apple.Finder AppleShowAllFiles -bool true && killall Finder"
	alias hide-dotfiles="defaults write com.apple.Finder AppleShowAllFiles -bool false && killall Finder"

	# Hide/show all desktop icons for presenting
	alias show-desktop-icons="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
	alias hide-desktop-icons="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"

	function sharescreen() {
		sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool false
		sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
	}
	function sharescreenstop() {
		sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist
	}
	function convertMetadata() {
		mdfind "kMDItemOMUserTags == *" -onlyin "." | while IFS= read -r file; do
			echo "$file"
			plistTags=$(mdls -plist - -name kMDItemOMUserTags "$file"|grep -v "kMDItemOMUserTags\|dict")
			xattr -w com.apple.metadata:_kMDItemUserTags "$plistTags" "$file"
		done
	}
	function mano() {
		if [ $# -eq 0 ]; then
			echo -e "No arguments specified. Usage:\n  mano command";
			return 1;
		fi
		mandoc -T pdf $(man -w $1) | open -fa Preview.app
	}
else
	alias flushdns='sudo systemd-resolve --flush-caches; sudo systemd-resolve --statistics'
	function mano() {
		if [ $# -eq 0 ]; then
			echo -e "No arguments specified. Usage:\n  mano command";
			return 1;
		fi
		man -Tps $1 | ps2pdf - | zathura - &
	}
fi

# Checksums
alias md2='openssl md2'
alias md4='openssl md4'
alias md5='openssl md5'
alias mdc2='openssl mdc2'
alias rmd160='openssl rmd160'
alias sha='openssl sha'
alias sha1='openssl sha1'
alias sha256sum='shasum --algorithm 256'


#==================================================== - How to reset a Linux clone
function cloneReset () { 
	# This function resets the machine ID and hostname for a Linux clone. It
	# is useful when you clone a VM or a machine and want to avoid conflicts
	# with the original machine. It will also reset the SSH host keys and
	# prompt how to add a new profile in netbird. 
	#
	# Usage: cloneReset <new-hostname> 
	# Example: cloneReset my-new-hostname 
	#
	# https://gist.github.com/iandol/85f663cf670cb3b94ea1b661757bb356
	[[ -z $1 ]] && return 1
	hostname=$1
	hostnamectl
	echo "Old Machine ID: $(cat /etc/machine-id) Old Hostname: $(cat /etc/hostname)"
	sudo rm -f /etc/machine-id /var/lib/dbus/machine-id
	sudo dbus-uuidgen --ensure=/etc/machine-id
	hostnamectl set-hostname $hostname
	sudo sed -i.bak -E 's/^[[:space:]]*127\.0\.1\.1.*/127.0.1.1 '"$hostname"'/' /etc/hosts
	echo "New Machine ID: $(cat /etc/machine-id) NewHostname: $(cat /etc/hostname)"
	sudo rm -f /etc/ssh/ssh_host_*
	sudo dpkg-reconfigure openssh-server
	sudo systemctl restart ssh
	echo "For netbird, you must [netbird profile add newprofile] and then [netbird profile select] it"
}

function updateFFMPEG() {
	cd ~ || exit
	lver=$(ffmpeg -version | grep -owE 'N-\d+-[^-]+')
	rver=$(curl -s https://evermeet.cx/ffmpeg/info/ffmpeg/snapshot | jq -r '.version')
	echo "Local: $lver & Remote: $rver"
	if [[ ! "N-$lver" =~ $rver ]]; then
		printf '\tDownloading new ffmpeg:\n'
		curl -JL --output ff.7z https://evermeet.cx/ffmpeg/get
		7z -y -o"$HOME/bin/" e ff.7z
		cp ~/bin/ffmpeg "$HOME/Library/Application Support/FFmpegTools/"
		rm ff.7z
		ffmpeg -version
	else
		printf "\tNo need to update…\n"
	fi
}

function avahiReset() {
	if [[ $PLATFORM = "Linux" ]]; then
		sudo systemctl stop avahi-daemon.socket
		sudo systemctl stop avahi-daemon.service
		sudo systemctl start avahi-daemon.socket
		sudo systemctl start avahi-daemon.service
		sudo systemctl status avahi-daemon.service
	fi
}

function avahiStop() {
	if [[ $PLATFORM = "Linux" ]]; then
		sudo systemctl stop avahi-daemon.socket
		sudo systemctl stop avahi-daemon.service
		sudo systemctl status avahi-daemon.service
	fi
}

function transfer() { 
	if [ $# -eq 0 ]; then
		echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md";
		return 1;
	fi
	tmpfile=$( mktemp -t transferXXX );
	if tty -s; then
		basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');
		curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> "$tmpfile"
	else 
		curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> "$tmpfile"
	fi;
	cat "$tmpfile"
	rm -f "$tmpfile"
}

function sp() {
	if [[ $# -eq 0 ]]; then
		echo "Will unset the proxy..."
		unset {http,https,ftp,all,no}_proxy
		git config --global --unset http.proxy
		git config --global --unset https.proxy
	elif [[ $# -eq 1 ]]; then
		export no_proxy="localhost, 127.0.0.1, ::1"
		if [[ $1 == "-l" ]]; then
			echo -e "Proxy settings:\n==============="
		else
			echo -e "Proxy set:\n===============\n" 
			if [[ $1 =~ ^socks5 ]]; then
				export {http,https,ftp,all}_proxy="$1"
				git config --global http.proxy "$1"
				git config --global https.proxy "$1"
			elif [[ $1 =~ ^http ]]; then
				export {http,https,ftp,all}_proxy="$1"
				git config --global http.proxy "$http_proxy"
				git config --global https.proxy "$https_proxy"
			else
				export {http,https,ftp,all}_proxy="http://$1"
				git config --global http.proxy "$http_proxy"
				git config --global https.proxy "$https_proxy"
			fi
		fi
	elif [[ $# -eq 2 ]]; then
		export no_proxy="localhost, 127.0.0.1, ::1"
		if [[ $1 == "-a" ]]; then # TODO add apt proxy setup
			echo -e "TODO:\n==============="
		else
			echo -e "Proxy set:\n===============" 
			export {http,ftp,all}_proxy="$1"
			export https_proxy="$2"
			if [[ $1 =~ ^socks5 ]]; then
				git config --global http.proxy "$1"
				git config --global https.proxy "$2"
			else
				git config --global http.proxy "http://$http_proxy"
				git config --global https.proxy "https://$https_proxy"
			fi
		fi
	fi
	echo -e "PROXY: HTTP = $http_proxy | HTTPS = $https_proxy | ALL = $all_proxy"
	echo -e "BYPASS: $no_proxy"
	echo -e "GIT:\n$(git config --global --get-regexp http)"
}
alias setproxy='sp'

# l(ist)ips Get local and WAN IP adddresses
lips() {
	local interface ip
	for interface in $(networksetup -listallhardwareports | awk '/^Device: /{print $2}'); do
		ip=$(ipconfig getifaddr $interface)
		[ "$ip" != "" ] && break
	done

	local locip extip

	[ "$ip" != "" ] && locip=$ip || locip="inactive"

	ip=$(dig +short myip.opendns.com @resolver1.opendns.com)
	[ "$ip" != "" ] && extip=$ip || extip="inactive"

	printf '%11s: %s\n%11s: %s\n' "Local IP" $locip "External IP" $extip
}

# Get Software Updates, update Homebrew itself, and upgrade installed Homebrew packages
function update() {
	sudo printf "\n=====>>> Start Update @ \e[93m$(date)\e[m <<<=====\n"
	myolddir=$(pwd)
	ul=(~/.dotfiles ~/Code/opticka ~/Code/octicka ~/Code/Titta ~/Code/Pingpong
	~/Code/CageLab ~/Code/matmoteGO ~/Code/PTBSimia ~/Code/Notes 
	~/Code/matlab-jzmq ~/Code/matlab-zmq 
	~/Code/AfterImage ~/Code/equiluminance ~/Code/Pinna ~/Code/spikes 
	~/Code/Psychtoolbox-3 ~/Code/fieldtrip ~/Code/Training ~/Code/Palamedes 
	~/Code/Mymou ~/Documents/MATLAB/gramm 
	~/Code/scrivomatic ~/Code/dotpandoc ~/Code/bookends-tools ~/Code/pandocomatic 
	~/Code/gears ~/Code/paru 
	"/media/$USER/data/Code/octicka" "/media/$USER/data/Code/Psychtoolbox-3")
	for x in $ul; do
		if [[ -d ${x}/.git ]]; then
			printf "\n\n---> Updating \e[92m%s\e[m...\n" "${x}"
			cd "${x}" || exit
			oldbranch=$(git branch | grep -e '\*' | cut -b 3-)

			# Check for local changes
			if [[ -n $(git status --porcelain) ]]; then
				printf "\t\t---> Found local changes in \e[93m%s\e[m, stashing...\n" "${x}"
				git stash save "Auto-stashed by update function $(date)"
				printf "\t\t---> Changes stashed. Use 'git stash list/pop' to recover\n"
			fi

			if [[ ! ${oldbranch} =~ master\|main ]]; then
				if [[ ${x} =~ fieldtrip ]]; then
					git checkout umaster
				elif [[ ${x} =~ Palamedes ]]; then
					git checkout main
				else
					git checkout master
				fi
			fi
			git pull
			git status
			if [[ -n $(git remote 2>/dev/null | grep upstream) ]]; then
				printf "\t\t---> Fetching \e[92m${x}\e[m upstream...\n"
				git fetch -v upstream
				if [[ ! ${x} =~ Psychtoolbox ]]; then
					git merge --ff-only -v upstream/master
				fi
			fi
			if [[ ! ${oldbranch} =~ 'master' ]]; then
				git checkout "${oldbranch}"
			fi
		fi
	done
	cd "$myolddir" 
	unset myolddir

	if [[ -x $(which brew) ]]; then
		printf '\n\n---> Updating \e[92mHomeBrew\e[m...\n'
		export HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK='true'
		brew update; brew outdated; brew upgrade --force-bottle; brew cleanup
	fi

	if [[ $PLATFORM = "Linux" ]]; then
		printf '\n\n---> Updating \e[92mApt/snap/flatpak/firmware\e[m...\n'
		sudo apt update; sudo apt autoremove; apt list --upgradable
		[[ -x $(which snap) ]] && sudo snap refresh
		[[ -x $(which flatpak) ]] && flatpak update -y
		[[ -x $(which fwupdmgr) ]] && fwupdmgr get-upgrades
	fi

	[[ -f $(which pixi) ]] && (printf '\n\n---> Updating \e[92mPIXI\e[m...\n'; pixi self-update; pixi global -v update)
	[[ -f $(which rbenv) ]] && (printf '\n\n---> Rehash \e[92mRBENV\e[m...\n'; rbenv rehash)
	[[ -f $(which pyenv) ]] && (printf '\n\n---> Rehash \e[92mPYENV\e[m...\n'; pyenv rehash)
	[[ -e "$HOME/.zi" ]] && (printf '\n\n---> Updating \e[92mZINIT\e[m...\n';zi self-update; zi update -p --all)
	[[ -e "$HOME/.x-cmd.root/bin/x-cmd" ]] &&  (printf '\n\n---> Updating \e[92mX-CMD\e[m...\n'; x-cmd upgrade; x-cmd update; x-cmd env upgrade --all --force)
	printf "\n=====>>> Finish Update @ \e[93m$(date)\e[m <<<=====\n"
}

function updateElvish () {
	[[ -f $(which elvish) ]] && elvish -version
	old_dir=$(pwd)
	tmp_dir=$(mktemp -d -t ci-XXXXXXXXXX)
	cd $tmp_dir
	tos='linux'; [[ $PLATFORM = "Darwin" ]] && tos='darwin'
	tpr='amd64'; 
	if [[ $(uname -m) = 'arm64' || $(uname -m) = 'aarch64' ]]; then
		tpr='arm64'
	fi
	printf "\nElvish download: OS = ${tos} | Processor = ${tpr}\n"
	curl -C - -O "https://mirrors.tuna.tsinghua.edu.cn/elvish/$tos-$tpr/elvish-HEAD.tar.gz" &&
	tar xvf elvish-HEAD.tar.gz &&
	sudo mkdir -p /usr/local/bin &&
	sudo rm -rf /usr/local/bin/elvish &&
	sudo cp elvish /usr/local/bin &&
	sudo chown $USER /usr/local/bin/elvish &&
	sudo chmod +x /usr/local/bin/elvish
	cd $old_dir
	rm -rf $tmp_dir
	[[ -f $(which elvish) ]] && elvish -version
}

function doBib() {
	myolddir=$(pwd); cd ~/Desktop
	if [[ $# -eq 0 ]]; then
		[[ -f "🌊Core.bib" ]] && mv 🌊Core.bib Core.bib
		filename="Core.bib"
	else
		filename=$1
	fi
	printf "\n---> Processing Bibliography file $filename @ \e[93m$(date)\e[m...\n"
	if [[ ! -f $filename ]]; then
		printf "\nCannot find $filename\n"
		return -1
	fi
	printf '\n---> Citeproc generating JSON from BIB file...\n'
	pandoc -f biblatex -t csljson $filename > Temp.json
	printf '\n---> Processing title case...\n'
	unset PIDS names i
	names=($filename Temp.json)
	i=1
	for x in $names; do
		fixCase.rb ${x} &
		p=$!; PIDS[$i]=$p
		printf "fixCase for %s - Loop: %i PID = %i\n" $x $i ${PIDS[$i]:-"Unknown"}
		((i++)) #https://linuxize.com/post/bash-increment-decrement-variable/
	done
	echo "Waiting for PIDS: ${PIDS}"
	wait ${PIDS}
	echo "Finshed processing title case"
	printf '\n---> Minifying JSON...\n'
	[[ -f Temp.json ]] && jq -c . < Temp.json > Core.json
	printf '\n---> Moving to Dropbox...\n'
	mv -v Core.* ~/Dropbox/Papers/References
	rm -v Temp.json
	printf '\n---> ...Finished!\n'
	cd $myolddir; unset filename myolddir
}

function updatePTB() {
	printf '\n---> Merging PTB...\n'
	cd ~/Code/Psychtoolbox-3
	git checkout master
	git pull
	git fetch upstream
	git merge --ff-only -v upstream/master
	printf '\n\n---> Merging Fieldtrip MASTER...\n'
	cd ~/Code/fieldtrip
	git checkout umaster
	git pull
	git fetch upstream
	git checkout master
	git merge upstream/master
	printf '\n\n---> Merging Fieldtrip MASTER -> PLEXON...\n'
	git checkout plexon
	git merge master
}

function updateAll() {
	printf '\n\n---> General Code Updates...\n'
	update
	updatePTB
	printf '\n\n---> Checking OS X updates...\n'
	sudo softwareupdate --list
	printf '\n---> Update finished...\n'
}

# See all UDP ports open
function listUDP() {
	if [ $# == 0 ]; then
		tok="matlab"
		echo "search for: $tok"
	else
		tok=$1
	fi
	sudo lsof -i UDP -P | grep -i "$tok"
}

# See listening TCP ports
function listTCP() {
	if [ $# == 0 ]; then
		tok="listen"
		echo "search for: $tok"
	else
		tok=$1
	fi
	sudo lsof -i TCP -P | grep -i "$tok"
}

function define() {
	local y="$@";
	curl -sA "Opera" "http://www.google.com/search?q=define:${y// /+}" | grep -Po '(?<=<li>)[^<]+'|nl|perl -MHTML::Entities -pe 'decode_entities($_)' 2>/dev/null;
}

function tman() {
	MANWIDTH=160 MANPAGER='col -bx' man $@ | mate
}

function settcpdelay() { #see http://www.small-tree.com/kb_results.asp?id=1 for details, use 0,2 or 3
	local d=${1};
	sudo /usr/sbin/sysctl -w net.inet.tcp.delayed_ack=${d};
}

function wireshark() {
	sudo chgrp admin /dev/bpf*
	sudo chmod g+rw /dev/bpf*
}

# inspired by `bd`: https://github.com/vigneshwaranr/bd
function _up() {
	local rx updir
	rx=$(ruby -e "print '$1'.gsub(/\s+/,'').split('').join('.*?')")
	updir=`echo $PWD | ruby -e "print STDIN.read.sub(/(.*\/${rx}[^\/]*\/).*/i,'\1')"`
	echo -n "$updir"
}

function up() {
	if [ $# -eq 0 ]; then
		echo "up: traverses up the current working directory to first match and cds to it"
		echo "You need an argument"
	else
		cd $(_up "$@")
	fi
}


