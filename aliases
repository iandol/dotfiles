#!/usr/bin/env zsh
if [[ "$(uname -s)" = "Darwin" ]]; then 
	alias la="ls -alGhF"
	alias las="ls -alGhFeLH"
	alias ll="ls -alFGh"
	alias llm="ls -alFGh@"
	alias dir='ls -alfG'
	alias cls='clear; ls'
	alias l.='ls -d .[^.]*' #only show .dot files
else
	alias ls='ls --color=auto'
	alias ll='ls -AFlh'
	alias la='ls -A'
	alias l='ls -CF'
fi
alias gst='git status'
alias gca='git commit --all'
alias la="ls -alGhF"
alias las="ls -alGhFeLH"
alias ll="ls -alFGh"
alias dir='ls -alfG'
alias cls='clear; ls'
alias l.='ls -d .[^.]*' #only show .dot files
alias grep="grep --color=auto"
alias gzip="gzip -9n" # set strongest compression level as ‘default’ for gzip
alias ping="ping -c 5" # ping 5 times ‘by default’

# Enable aliases to be sudo’ed
#alias sudo='sudo '

# Sizes of Folder Contents
alias sizes='du -sh * | sort -h'

# Minimal TeX packages for Pandoc with BasicTeX
alias installTeX='sudo tlmgr install lm-math lualatex-math luatexja abstract \
latexmk csquotes pagecolor relsize ucharcat mdframed needspace sectsty \
titling titlesec preprint layouts glossaries tabulary soul xargs todonotes \
mfirstuc xfor wallpaper datatool substr ctablestack'

# conflicts with MATLAB PTB, so we must manually [dis|en]able
alias karabinerLoad='sudo launchctl load /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_grabber.plist; sudo launchctl start /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_grabber.plist'
alias karabinerUnload='sudo launchctl stop /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_grabber.plist; sudo launchctl unload /Library/LaunchDaemons/org.pqrs.karabiner.karabiner_grabber.plist'

alias zerotierUnload='sudo launchctl unload /Library/LaunchDaemons/com.zerotier.one.plist'
alias zerotierLoad='sudo launchctl load /Library/LaunchDaemons/com.zerotier.one.plist'
alias zerotierUninstall='sudo /Library/Application\ Support/ZeroTier/One/uninstall.sh'

#manage bash/zsh
if [[ -f $(which subl) ]]; then 
	alias edit='subl -w'; #prefer sublime text
	alias s='subl';
else
	alias edit='vim';
fi
alias reloadbash='source ~/.bashrc'
alias reloadzsh='source ~/.zshrc'
alias editbash='edit ~/.bashrc ~/.bash_profile ~/.dotfiles/env ~/.dotfiles/config ~/.dotfiles/aliases && reloadbash'
alias editzsh='edit ~/.zshrc ~/.dotfiles/config ~/.dotfiles/aliases && reloadzsh'
alias usezsh='chsh -s $(which zsh) && reloadzsh'
alias usebash='chsh -s $(which bash) && reloadbash'

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

if [[ "$(uname -s)" = "Darwin" ]]; then 
	alias randomAddress="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//'"
	alias randomiseMAC="openssl rand -hex 6 | sed 's/\(..\)/\1:/g; s/.$//' | xargs sudo ifconfig en0 ether"
	alias noquarantine='xattr -d com.apple.quarantine '
	alias lock="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
	alias stfu="osascript -e 'set volume output muted true'"
	alias pumpitup="sudo osascript -e 'set volume 10'"
	alias hax="growlnotify -a 'Activity Monitor' 'System error' -m 'WTF R U DOIN'"
	alias findbig='sudo -v; sudo find -xf /.Trashes /Volumes /Library /private /Temp* -type f -size +200000 -print0 | sudo xargs -0 ls -lohdSr'
	alias measurebig='for f in /Volumes /.Spotlight* /.Trashes /Library/Logs /private/ {var/{log,spool,db,vm,tmp},tmp} /Temp*; do sudo du -hsx "$f"; done'
	alias lsregister='/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister'
	alias lsrebuild='/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -v -kill -r -domain local -domain system -domain user'
	alias profop='sudo fs_usage -w -f filesys -e Terminal Parallels mds nmbd Dock WindowServer ATSServer Quicksilver > ~/Desktop/operafs.txt' #profile opera file system usage
	alias airscan="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s"
	#alias kernel64='sudo systemsetup -setkernelbootarchitecture x86_64'
	#alias kernel32='sudo systemsetup -setkernelbootarchitecture i386'
	alias top='TERM=vt100 top'
  alias reveal='open --reveal'
  alias nitenite='exec pmset sleepnow'

	# Quicklook and Spotlight
  alias ql='qlmanage -p'
  alias quicklook='qlmanage -p'
  alias spotlighter='mdfind -onlyin `pwd`'

	# `wifi on` to turn wifi on, and `wifi off` to turn it off
	alias wifi="networksetup -setairportpower $(networksetup -listallhardwareports | grep -A 2 'Hardware Port: Wi-Fi' | grep 'Device:' | awk '{print $2}')"

	#Some hardcore maintainance
	alias rebuildkexts="sudo touch /System/Library/Extensions"
	alias rebuilddyld="sudo update_dyld_shared_cache -force"

	# Flush DNS cache
	alias flushdnsolder="sudo dscacheutil -flushcache"
	alias flushdnsmavericks="dscacheutil -flushcache; sudo killall -HUP mDNSResponder"
	alias flushdnsold="sudo discoveryutil udnsflushcaches; sudo discoveryutil mdnsflushcache"
	alias flushdns="sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache;say macOS DNS cache cleared"

	#useful info
	alias mymemory="top -l 1 | awk '/(pagein|Mem)/'; vm_stat"
	alias kext3="kextstat | grep -v com.apple" #find 3rd party kernel extensions
	alias mydisplay="ioreg -lw0 | grep IODisplayEDID | sed \"/[^<]*</s///\" | xxd -p -r | strings -6" #find id of display
	alias whywakeme="syslog | grep -i \"Wake reason =\"" #find why the machine woke up
	alias powerlog="pmset -g pslog" #log of active power/sleep info
	alias batterypercent="pmset -g batt | egrep '([0-9]+\%).*' -o --colour=auto | cut -f1 -d';'"

	# Empty the Trash on all mounted volumes and the main HDD
	# Also, clear Apple’s System Logs to improve shell startup speed
	alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"

	#Clean font caches
	alias fontclean="sudo atsutil databases -remove"

	# Show/hide hidden files in Finder
	alias show-dotfiles="defaults write com.apple.Finder AppleShowAllFiles -bool true && killall Finder"
	alias hide-dotfiles="defaults write com.apple.Finder AppleShowAllFiles -bool false && killall Finder"

	# Hide/show all desktop icons for presenting
	alias show-desktop-icons="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"
	alias hide-desktop-icons="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"


	function sharescreen() {
		sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool false
		sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
	}
	function sharescreenstop() {
		sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist
	}

fi

# Checksums
alias md2='openssl md2'
alias md4='openssl md4'
alias md5='openssl md5'
alias mdc2='openssl mdc2'
alias rmd160='openssl rmd160'
alias sha='openssl sha'
alias sha1='openssl sha1'
alias sha256sum='shasum --algorithm 256'

# Download - it downloads the specified file
alias dl='curl -C - -O'
# This one is really useful - it shares the current directory open in terminal
# It shares this at the location localhost:8000
alias sharedir='python -m SimpleHTTPServer'

# Get readable list of network IPs
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
#My IP address
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
# Enhanced WHOIS lookups
alias whois="whois -h whois-servers.net"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# File size
alias fs="stat -f \"%z bytes\""

# ROT13-encode text. Works for decoding, too! ;)
alias rot13='tr a-zA-Z n-za-mN-ZA-M'

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

function transfer() { 
  if [ $# -eq 0 ]; then
    echo -e "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md";
    return 1;
  fi
  tmpfile=$( mktemp -t transferXXX );
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile;
  else 
    curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ;
  fi;
  cat $tmpfile;
  rm -f $tmpfile;
}

function setproxy() {
	if [[ $# -eq 0 ]]; then

		echo "Will unset the proxy..."
		unset http_proxy
		unset https_proxy
		git config --global --unset http.proxy
		git config --global --unset https.proxy
		
	elif [[ $# -eq 1 ]]; then
		if [[ $1 == "-l" ]]; then

			echo "Proxy settings: " 

		else

			echo "Proxy set: " 
			export http_proxy="$1"
			export https_proxy=$http_proxy
			git config --global http.proxy "http://$http_proxy"
			git config --global https.proxy "http://$https_proxy"

		fi
	elif [[ $# -eq 2 ]]; then

		echo "Proxy set: " 
		export http_proxy="$1"
		export https_proxy="$2"
		git config --global http.proxy "http://$http_proxy"
		git config --global https.proxy "http://$https_proxy"

	fi
	echo "PROXY: HTTP = $http_proxy | HTTPS = $https_proxy"
}

# l(ist)ips Get local and WAN IP adddresses
lips() {
	local interface ip
	for interface in $(networksetup -listallhardwareports | awk '/^Device: /{print $2}'); do
		ip=$(ipconfig getifaddr $interface)
		[ "$ip" != "" ] && break
	done

	local locip extip

	[ "$ip" != "" ] && locip=$ip || locip="inactive"

	ip=`dig +short myip.opendns.com @resolver1.opendns.com`
	[ "$ip" != "" ] && extip=$ip || extip="inactive"

	printf '%11s: %s\n%11s: %s\n' "Local IP" $locip "External IP" $extip
}

# Get Software Updates, update Homebrew itself, and upgrade installed Homebrew packages
function update() {
  printf "\n=====>>> Update @ \e[93m$(date)\e[m <<<=====\n"
	myolddir=$(pwd)
	ul=(.dotfiles .zplug Code/dotpandoc Code/opticka
		Code/AfterImage Code/isoluminant Code/Pinna Code/spikes/
		Code/scrivomatic Code/bookends-tools Code/pandocomatic Code/paru
		Documents/MATLAB/gramm Code/CPServer
		Code/Psychtoolbox-3 Code/fieldtrip)
	for x in $ul; do
		if [[ -d ~/${x}/.git ]]; then
			printf "\n\n---> Updating \e[92m${x}\e[m...\n"
			cd ~/${x}
			git checkout master
			git pull
			git status
			if [[ -n $(git remote 2>/dev/null | grep upstream) ]]; then
				printf "\t\t---> Fetching \e[92m${x}\e[m upstream...\n"
				git fetch -v upstream
				if [[ ! ${x} =~ 'Psychtoolbox' ]]; then
					git merge --ff-only -v upstream/master
				fi
			fi
		fi
	done
	cd $myolddir
	unset myolddir

	if [[ "$(uname -s)" = "Darwin" ]]; then 
		printf '\n\n---> Updating \e[92mHomeBrew\e[m...\n'
		brew update
		brew upgrade
		brew cask upgrade
		brew cleanup && brew cask cleanup
	fi

	[[ -f $(which rbenv) ]] && (printf '\n\n---> Rehash \e[92mRBENV\e[m...\n'; rbenv rehash)

	[[ -e "$HOME/.zplug" ]] && (printf '\n\n---> Updating \e[92mZPLUG\e[m...\n';zplug info; zplug list; zplug update)
	[[ $SHELL = *zsh* ]] && (printf '\n\n---> Updating \e[92mcompinit\e[m...\n'; rm -f "$HOME/.zcompdump"; compinit)
}

function doBib() {
	printf '\n---> Processing Bibliography file...\n'
	cd ~/Desktop
	pandoc-citeproc -j ~/Desktop/Core.bib > ~/Desktop/Core.json
	fixCase.rb ~/Desktop/Core.bib
	fixCase.rb ~/Desktop/Core.json
	printf '\n---> Moving to Dropbox...\n'
	mv ~/Desktop/Core.* ~/Dropbox/Papers/References
	printf '\n---> ...Finished!\n'
}

function updatePTB() {
	printf '\n---> Merging PTB...\n'
	cd ~/Code/Psychtoolbox-3
	git checkout master
	git pull
	git fetch upstream
	git merge --ff-only -v upstream/master
	printf '\n\n---> Merging Fieldtrip MASTER...\n'
	cd ~/Code/fieldtrip
	git checkout master
	git pull
	git fetch upstream
	git checkout master
	git merge upstream/master
	printf '\n\n---> Merging Fieldtrip MASTER -> PLEXON...\n'
	git checkout plexon
	git merge master
}

function updateAll() {
	printf '\n\n---> General Code Updates...\n'
	update
	updatePTB
	printf '\n\n---> Checking OS X updates...\n'
	sudo softwareupdate --list
	printf '\n---> Update finished...\n'
}

# See all UDP ports open
function listUDP() {
	if [ $# == 0 ]; then
		tok="matlab"
		echo "search for: $tok"
	else
		tok=$1
	fi
	sudo lsof -i UDP -P | grep -i "$tok"
}

# See listening TCP ports
function listTCP() {
	if [ $# == 0 ]; then
		tok="listen"
		echo "search for: $tok"
	else
		tok=$1
	fi
	sudo lsof -i TCP -P | grep -i "$tok"
}

function define() {
	local y="$@";
	curl -sA "Opera" "http://www.google.com/search?q=define:${y// /+}" | grep -Po '(?<=<li>)[^<]+'|nl|perl -MHTML::Entities -pe 'decode_entities($_)' 2>/dev/null;
}

function pman() {
	man -t "${1}" | open -f -a /Applications/Preview.app
}

function tman() {
	MANWIDTH=160 MANPAGER='col -bx' man $@ | mate
}

function settcpdelay() { #see http://www.small-tree.com/kb_results.asp?id=1 for details, use 0,2 or 3
	local d=${1};
	sudo /usr/sbin/sysctl -w net.inet.tcp.delayed_ack=${d};
}

function wireshark() {
	sudo chgrp admin /dev/bpf*
	sudo chmod g+rw /dev/bpf*
}

# inspired by `bd`: https://github.com/vigneshwaranr/bd
function _up() {
	local rx updir
	rx=$(ruby -e "print '$1'.gsub(/\s+/,'').split('').join('.*?')")
	updir=`echo $PWD | ruby -e "print STDIN.read.sub(/(.*\/${rx}[^\/]*\/).*/i,'\1')"`
	echo -n "$updir"
}

function up() {
	if [ $# -eq 0 ]; then
		echo "up: traverses up the current working directory to first match and cds to it"
		echo "You need an argument"
	else
		cd $(_up "$@")
	fi
}
