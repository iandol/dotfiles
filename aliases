if [[ $OSTYPE == 'darwin'* ]]; then 
	alias la="ls -alGhF"
	alias las="ls -alGhFeLH"
	alias ll="ls -alFGh"
	alias llm="ls -alFGh@"
	alias dir='ls -alfG'
	alias cls='clear; ls'
	alias l.='ls -d .[^.]*' #only show .dot files
else
	alias ls='ls --color=auto'
	alias ll='ls -AFlh'
	alias la='ls -A'
	alias l='ls -CF'
fi
alias gst='git status'
alias gca='git commit --all'
alias la="ls -alGhF"
alias las="ls -alGhFeLH"
alias ll="ls -alFGh"
alias dir='ls -alfG'
alias cls='clear; ls'
alias l.='ls -d .[^.]*' #only show .dot files
alias grep="grep --color=auto"
alias gzip="gzip -9n" # set strongest compression level as ‘default’ for gzip
alias ping="ping -c 5" # ping 5 times ‘by default’

# Enable aliases to be sudo’ed
alias sudo='sudo '

alias installTeX='sudo tlmgr install abstract latexmk csquotes pagecolor relsize ucharcat sectsty titling titlesec preprint'

#manage bash/zsh
if [[ -f $(which subl) ]]; then 
	alias edit='subl -w'; #prefer sublime text
	alias s='subl';
else
	alias edit='vim';
fi
alias reloadbash='source ~/.bashrc'
alias reloadzsh='source ~/.zshrc'
alias editbash='edit ~/.bashrc ~/.bash_profile ~/.dotfiles/env ~/.dotfiles/config ~/.dotfiles/aliases && reloadbash'
alias editzsh='edit ~/.zshrc ~/.dotfiles/config ~/.dotfiles/aliases && reloadzsh'
alias usezsh='chsh -s $(which zsh) && reloadzsh'
alias usebash='chsh -s $(which bash) && reloadbash'

# Processes
alias tu='top -o cpu' # cpu
alias tm='top -o vsize' # memory

if [[ $OSTYPE == 'darwin'* ]]; then 
  alias noquarantine='xattr -d com.apple.quarantine '
	alias ql="qlmanage -p 2>/dev/null" # preview a file using QuickLook
	alias lock="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"
	alias stfu="osascript -e 'set volume output muted true'"
	alias pumpitup="sudo osascript -e 'set volume 10'"
	alias hax="growlnotify -a 'Activity Monitor' 'System error' -m 'WTF R U DOIN'"
	alias findbig='sudo -v; sudo find -xf /.Trashes /Volumes /Library /private /Temp* -type f -size +200000 -print0 | sudo xargs -0 ls -lohdSr'
	alias measurebig='for f in /Volumes /.Spotlight* /.Trashes /Library/Logs /private/ {var/{log,spool,db,vm,tmp},tmp} /Temp*; do sudo du -hsx "$f"; done'
	alias lsregister='/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister'
	alias lsrebuild='/System/Library/Frameworks/CoreServices.framework/Versions/A/Frameworks/LaunchServices.framework/Versions/A/Support/lsregister -v -kill -r -domain local -domain system -domain user'
	alias profop='sudo fs_usage -w -f filesys -e Terminal Parallels mds nmbd Dock WindowServer ATSServer Quicksilver > ~/Desktop/operafs.txt' #profile opera file system usage
	alias airscan="/System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -s"
	#alias kernel64='sudo systemsetup -setkernelbootarchitecture x86_64'
	#alias kernel32='sudo systemsetup -setkernelbootarchitecture i386'

	#Some hardcore maintainance
	alias rebuildkexts="sudo touch /System/Library/Extensions"
	alias rebuilddyld="sudo update_dyld_shared_cache -force"

	# Flush DNS cache
	alias flushdnsolder="sudo dscacheutil -flushcache"
	alias flushdnsmavericks="dscacheutil -flushcache; sudo killall -HUP mDNSResponder"
	alias flushdnsold="sudo discoveryutil udnsflushcaches; sudo discoveryutil mdnsflushcache"
	alias flushdns="sudo killall -HUP mDNSResponder;sudo killall mDNSResponderHelper;sudo dscacheutil -flushcache;say macOS DNS cache cleared"

	#useful info
	alias mymemory="top -l 1 | awk '/(pagein|Mem)/'; vm_stat"
	alias kext3="kextstat | grep -v com.apple" #find 3rd party kernel extensions
	alias mydisplay="ioreg -lw0 | grep IODisplayEDID | sed \"/[^<]*</s///\" | xxd -p -r | strings -6" #find id of display
	alias whywakeme="syslog | grep -i \"Wake reason =\"" #find why the machine woke up
	alias powerlog="pmset -g pslog" #log of active power/sleep info

	# Empty the Trash on all mounted volumes and the main HDD
	# Also, clear Apple’s System Logs to improve shell startup speed
	alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; sudo rm -rfv ~/.Trash; sudo rm -rfv /private/var/log/asl/*.asl"

	#Clean font caches
	alias fontclean="sudo atsutil databases -remove"

	# Show/hide hidden files in Finder
	alias show="defaults write com.apple.Finder AppleShowAllFiles -bool true && killall Finder"
	alias hide="defaults write com.apple.Finder AppleShowAllFiles -bool false && killall Finder"

	# Hide/show all desktop icons (useful when presenting)
	alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
	alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

  function sharescreen() {
    sudo defaults write /var/db/launchd.db/com.apple.launchd/overrides.plist com.apple.screensharing -dict Disabled -bool false
    sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.screensharing.plist
  }
  function sharescreenstop() {
    sudo launchctl unload /System/Library/LaunchDaemons/com.apple.screensharing.plist
  }

fi

# Checksums
alias md2='openssl md2'
alias md4='openssl md4'
alias md5='openssl md5'
alias mdc2='openssl mdc2'
alias rmd160='openssl rmd160'
alias sha='openssl sha'
alias sha1='openssl sha1'
alias sha256sum='shasum --algorithm 256'

# Download - it downloads the specified file
alias dl='curl -C - -O'
# This one is really useful - it shares the current directory open in terminal
# It shares this at the location localhost:8000
alias sharedir='python -m SimpleHTTPServer'

# Get readable list of network IPs
alias ips="ifconfig -a | perl -nle'/(\d+\.\d+\.\d+\.\d+)/ && print $1'"
#My IP address
alias myip="dig +short myip.opendns.com @resolver1.opendns.com"
# Enhanced WHOIS lookups
alias whois="whois -h whois-servers.net"

# View HTTP traffic
alias sniff="sudo ngrep -d 'en1' -t '^(GET|POST) ' 'tcp and port 80'"
alias httpdump="sudo tcpdump -i en1 -n -s 0 -w - | grep -a -o -E \"Host\: .*|GET \/.*\""

# File size
alias fs="stat -f \"%z bytes\""

# ROT13-encode text. Works for decoding, too! ;)
alias rot13='tr a-zA-Z n-za-mN-ZA-M'

# URL-encode strings
alias urlencode='python -c "import sys, urllib as ul; print ul.quote_plus(sys.argv[1]);"'

function setproxy() {
	if [[ $# == 0 ]]; then
    echo "Will unset the proxy..."
		unset http_proxy
		unset https_proxy
		git config --global --unset http.proxy
		git config --global --unset https.proxy
	elif [[ $# == 1 ]]; then
		export http_proxy="$1"
		export https_proxy=$http_proxy
		git config --global http.proxy "http://$http_proxy"
		git config --global https.proxy "http://$https_proxy"
	elif [[ $# == 2 ]]; then
		export http_proxy="$1"
		export https_proxy="$2"
		git config --global http.proxy "http://$http_proxy"
		git config --global https.proxy "http://$https_proxy"
	fi
	echo "setproxy = HTTP = $http_proxy | HTTPS = $https_proxy"
}

# Get Software Updates, update Homebrew itself, and upgrade installed Homebrew packages
function update() {
	myolddir=$(pwd)
	if [[ -d ~/.dotfiles ]]; then
		printf '\n\n---> Updating DOTFILES...\n'
		cd ~/.dotfiles
		git pull
		git status
	fi
	if [[ -d ~/Code/opticka/.git ]]; then
		printf '\n\n---> Updating OPTICKA...\n'
		cd ~/Code/opticka
		git pull
		git status
	fi
	if [[ -d ~/Code/spikes/.git ]]; then
		printf '\n\n---> Updating SPIKES...\n'
		cd ~/Code/spikes
		git pull
		git status
	fi
	if [[ -d ~/Code/scrivomatic/.git ]]; then
		printf '\n\n---> Updating SCRIVOMATIC...\n'
		cd ~/Code/scrivomatic
		git pull
		git status
	fi
  if [[ -d ~/Code/bookends-tools/.git ]]; then
    printf '\n\n---> Updating BOOKENDS-TOOLS...\n'
    cd ~/Code/bookends-tools
    git pull
    git status
  fi
	if [[ -d ~/Code/pandocomatic/.git ]]; then
		printf '\n\n---> Updating PANDOCOMATIC...\n'
		cd ~/Code/pandocomatic
		git checkout master
		git pull
		git status
		if [[ -n $(git remote | grep upstream) ]]; then
			printf '\t\t---> Fetching upstream...\n'
			git fetch -v upstream
			git merge -s octopus --ff-only -stat upstream/master
		fi
	fi
    if [[ -d ~/Code/paru/.git ]]; then
    printf '\n\n---> Updating PARU...\n'
    cd ~/Code/paru
    git checkout master
    git pull
    git status
    if [[ -n $(git remote | grep upstream) ]]; then
      printf '\t\t---> Fetching upstream...\n'
      git fetch -v upstream
      git merge -s octopus --ff-only -stat upstream/master
    fi
  fi
	if [[ -d ~/Code/AfterImage/.git ]]; then
		printf '\n\n---> Updating AFTERIMAGE...\n'
		cd ~/Code/AfterImage
		git pull
		git status
	fi
	if [[ -d ~/Code/isoluminant/.git ]]; then
		printf '\n\n---> Updating ISOLUMINANT...\n'
		cd ~/Code/isoluminant
		git pull
		git status
	fi
	if [[ -d ~/Code/Pinna/.git ]]; then
		printf '\n\n---> Updating PINNA...\n'
		cd ~/Code/Pinna
		git pull
		git status
	fi
	if [[ -d ~/Code/Psychtoolbox-3/.git ]]; then
		printf '\n\n---> Updating PTB...\n'
		cd ~/Code/Psychtoolbox-3
		git pull
		if [[ -n $(git remote | grep upstream) ]]; then
			printf '\t\t---> Fetching upstream PTB...\n'
			git fetch -v upstream
		fi
	fi
	if [[ -d ~/Code/fieldtrip ]]; then
		printf '\n\n---> Updating FIELDTRIP...\n'
		cd ~/Code/fieldtrip
		git pull
		if [[ -n $(git remote | grep upstream) ]]; then
			printf '\t\t---> Fetching upstream FIELDTRIP...\n'
			git fetch -v upstream
		fi
	fi
	if [[ -d ~/Documents/MATLAB/gramm/.git ]]; then
		printf '\n\n---> Updating GRAMM...\n'
		cd ~/Documents/MATLAB/gramm/
		git pull
		git status
	fi
	if [[ -d ~/Code/CPServer/.git ]]; then
		printf '\n\n---> Updating CP...\n'
		cd ~/Code/CPServer
		git pull
		git status
	fi
	cd $myolddir
	unset $myolddir

  if [[ $OSTYPE == 'darwin'* ]]; then 
  	printf '\n\n---> Updating homebrew...\n'
  	brew update
  	brew upgrade
  	brew cleanup -f && brew cask cleanup
  fi

	[[ -f $(which rbenv) ]] && rbenv rehash; printf '\n\n---> Rehash RBENV...\n'

	[[ -e "$HOME/.antigen" ]] && printf '\n\n---> Updating Antigen...\n'
	[[ -e "$HOME/.antigen" ]] && antigen selfupdate; upgrade_oh_my_zsh; antigen update; antigen cleanup
}

function updatePTB() {
	printf '\n---> Merging PTB...\n'
	cd ~/Code/Psychtoolbox-3
	git checkout master
	git pull
	git fetch upstream
	git merge upstream/master
	printf '\n\n---> Merging Fieldtrip MASTER...\n'
	cd ~/Code/fieldtrip
	git checkout master
	git pull
	git fetch upstream
	git checkout master
	git merge upstream/master
	printf '\n\n---> Merging Fieldtrip MASTER -> PLEXON...\n'
	git checkout plexon
	git merge master
}

function updateAll() {
	printf '\n\n---> General Code Updates...\n'
	update
	updatePTB
	printf '\n\n---> Checking OS X updates...\n'
	sudo softwareupdate --list
	printf '\n---> Update finished...\n'
}

# See all UDP ports open
function listUDP() {
	if [ $# == 0 ]; then
		tok="matlab"
		echo "search for: $tok"
	else
		tok=$1
	fi
	sudo lsof -i UDP -P | grep -i "$tok"
}

# See listening TCP ports
function listTCP() {
	if [ $# == 0 ]; then
		tok="listen"
		echo "search for: $tok"
	else
		tok=$1
	fi
	sudo lsof -i TCP -P | grep -i "$tok"
}

function define() {
	local y="$@";
	curl -sA "Opera" "http://www.google.com/search?q=define:${y// /+}" | grep -Po '(?<=<li>)[^<]+'|nl|perl -MHTML::Entities -pe 'decode_entities($_)' 2>/dev/null;
}

function pman() {
	man -t "${1}" | open -f -a /Applications/Preview.app
}

function tman() {
	MANWIDTH=160 MANPAGER='col -bx' man $@ | mate
}

function settcpdelay() { #see http://www.small-tree.com/kb_results.asp?id=1 for details, use 0,2 or 3
	local d=${1};
	sudo /usr/sbin/sysctl -w net.inet.tcp.delayed_ack=${d};
}

function wireshark() {
	sudo chgrp admin /dev/bpf*
	sudo chmod g+rw /dev/bpf*
}

# inspired by `bd`: https://github.com/vigneshwaranr/bd
function _up() {
	local rx updir
	rx=$(ruby -e "print '$1'.gsub(/\s+/,'').split('').join('.*?')")
	updir=`echo $PWD | ruby -e "print STDIN.read.sub(/(.*\/${rx}[^\/]*\/).*/i,'\1')"`
	echo -n "$updir"
}

function up() {
	if [ $# -eq 0 ]; then
		echo "up: traverses up the current working directory to first match and cds to it"
		echo "You need an argument"
	else
		cd $(_up "$@")
	fi
}
