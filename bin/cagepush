#!/usr/bin/env zsh
# cagepush: Push local project directories to remote server via rsync over SSH
# - Designed for CageLab development environment, but easily adaptable.
# - Syncs one or more local source dirs to DEST_USER_HOST:DEST_BASE/<dirname>/
# - Uses robust SSH options for non-interactive use.
# - Supports dry-run mode and custom remote host via args.
# - Excludes files/dirs listed in ~/.config/.rsync-excludes if present.
# - Creates remote dirs if needed (with --mkpath if available).
# - Use with SSH keys for passwordless auth (e.g., ssh-agent).
# ===== ARGUMENTS =====
# Usage:
#   cagepush [-n] [-s user@host] <src_dir1> [src_dir2 ...]
#   cagepush [-n] [-suser@host]  <src_dir1> [src_dir2 ...]
# If no sources are given, defaults to ~/Code/CageLab.
# -n / --dry-run : rsync dry-run
# -s : override DEST_USER_HOST (separate arg)
# -suser@host : override DEST_USER_HOST (attached form)
set -euo pipefail

# ===== CONFIG (edit as needed) =====
DEST_USER_HOST="cagelab@cagelab-dev.cloud.lab"  # remote SSH user@host
DEST_BASE="~/Code"                              # remote base dir; ~ expands on remote
EXCLUDES="${HOME}/.config/.rsync-excludes"      # optional common exclude list

# SSH options for robustness & non-interactive automation
SSH_OPTS=(
  -o BatchMode=yes
  -o ConnectTimeout=10
  -o ServerAliveInterval=30
  -o ServerAliveCountMax=3
)

# Base rsync flags (archive, compress, mirror, human output, progress & stats)
RSYNC_FLAGS=(
  -a -z --delete
  --human-readable
  --itemize-changes
  --info=stats2,progress2
  --partial --partial-dir=.rsync-partial
)

# Uncomment if you need these across Linux↔Linux with matching filesystems:
# RSYNC_FLAGS+=(-H -A -X)   # hardlinks, ACLs, xattrs

# Optional bandwidth cap (KB/s): e.g., 20000 ≈ 20 MB/s
# RSYNC_FLAGS+=(--bwlimit=20000)

# ===== ARG PARSING =====
DRYRUN=0
sources=()

# Parse options
while [[ $# -gt 0 ]]; do
  case "$1" in
    -n|--dry-run)
      DRYRUN=1
      shift
      ;;
    -s)
      if [[ $# -lt 2 ]]; then
        echo "Error: -s requires an argument (user@host)" >&2
        exit 2
      fi
      DEST_USER_HOST="$2"
      shift 2
      ;;
    -s*)
      # Attached form: -suser@host
      DEST_USER_HOST="${1#-s}"
      shift
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "Unknown option: $1" >&2
      exit 2
      ;;
    *)
      sources+=("$1")
      shift
      ;;
  esac
done

# Any remaining args after -- go in sources
while [[ $# -gt 0 ]]; do
  sources+=("$1")
  shift
done

# If nothing was added after options, default to one project
if [[ ${#sources} -eq 0 ]]; then
  sources=("${HOME}/Code/CageLab")
fi

# Add exclude list if present
[[ -f "${EXCLUDES}" ]] && RSYNC_FLAGS+=("--exclude-from=${EXCLUDES}")

# Dry run requested?
(( DRYRUN )) && RSYNC_FLAGS+=("--dry-run")

# ===== FEATURE DETECTION: --mkpath =====
HAS_MKPATH=0
if rsync --help 2>&1 | grep -q -- '--mkpath'; then
  HAS_MKPATH=1
  RSYNC_FLAGS+=("--mkpath")
fi

# ===== FUNCTIONS =====
sync_one() {
  local src_raw="$1"
  # Resolve to absolute path locally; ensure trailing slash to copy *contents*
  local src_abs="${src_raw:A}"
  if [[ ! -d "$src_abs" ]]; then
    echo "Skipping: $src_abs (not a directory)" >&2
    return 1
  fi
  local src_with_slash="${src_abs%/}/"

  # Destination path: DEST_BASE/<basename(src)>/
  local base_name
  base_name="$(basename "$src_abs")"
  local dest_path="${DEST_BASE%/}/${base_name}/"  # keep trailing slash

  # Create destination path if mkpath isn't available
  if (( ! HAS_MKPATH )); then
    # Quote to keep ~ for remote expansion; do NOT expand locally
    ssh "${SSH_OPTS[@]}" "${DEST_USER_HOST}" "mkdir -p '${dest_path%/}'" >/dev/null
  fi

  echo "→ Syncing: ${src_with_slash}  ➜  ${DEST_USER_HOST}:${dest_path}"
  rsync "${RSYNC_FLAGS[@]}" \
    -e "ssh ${SSH_OPTS[*]}" \
    -- \
    "${src_with_slash}" "${DEST_USER_HOST}:${dest_path}"
}

# ===== RUN (iterate all sources) =====
rc=0
for s in "${sources[@]}"; do
  if ! sync_one "$s"; then
    rc=1
  fi
done
exit "$rc"
