#!/usr/bin/env ruby
#require "profile"
#require "pry"
#require "byebug"

puts "===> Parsing FODT using Ruby V." + RUBY_VERSION
infilename = ARGV[0]
fail "Please specify an existing file!" unless infilename and File.exist?(infilename)
#byebug
#require 'debug'
#=========check if .md file is passed, if so parse it to fodt
ismd =  /\.md$/
if infilename =~ ismd
	puts "===> Converting MD to FODT..."
	#c = `which mmd2odf`.sub!(/\n$/," ") + infilename.sub(/ /,"\\ ") #build command
	c = "multimarkdown -b -t odf " + infilename.sub(/ /,"\\ ") #build command
	puts "===> Command to execute: " + c
	x = system(c) #run the system command
	puts "===> Check for FODT file..."
	filename = infilename.sub(ismd,".fodt")
	puts "===> New filename: " + filename
else
	filename = infilename
end
fail "===> No FODT file present!" unless filename =~ /fodt$/ and File.exist?(filename)

#binding.pry #use PRY to examine state
File.open(filename, "r+") do |f|
	re = [
		/svg:width="95%"/, #use more space for frames
		/style:print-content="false"/, #Fix PDF generation not including images
		/Courier New/, #better monospace font!!!
		/<style:paragraph-properties fo:margin-left="0\.3937in"/, #quotations
		/                               fo:text-align="justify"/, #quotations
		/<text:p text:style-name="Horizontal_20_Line"\/>/, #kill HR
		/text:bullet-char=""/, #unknown character
		/<style:header><text:h text:outline-level="2">Bibliography<\/text:h><\/style:header>/, #remove rogue bibliography
		/<draw:text-box><text:p><draw:frame text:anchor-type="as-char"/, #add style to figure
		/<office:styles>/, #inject figure styles
		/<text:p>([[[:alnum:]][[:space:]]]+)<text:sequence text:name="Figure"/	
	]
	rep = [
		'svg:width="100%" style:rel-width="100%"', #style:rel-width="100%"
		'fo:margin-left="0cm" fo:margin-right="0cm"',
		'Menlo',
		'<style:text-properties fo:font-style="italic" style:font-style-complex="italic"/><style:paragraph-properties fo:margin-left="1cm"',
		'fo:text-align="left"',
		'',
		'text:bullet-char="•"',
		'',	
		'<draw:text-box><text:p text:style-name="FigureWithCaption"><draw:frame text:anchor-type="as-char"',
		'<office:styles><style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra"><style:paragraph-properties fo:margin-top="0.1cm" fo:margin-bottom="0.1cm" style:contextual-spacing="false" text:number-lines="false" text:line-number="0" /></style:style><style:style style:name="FigureCaption" style:family="paragraph" style:parent-style-name="Caption" style:class="extra"></style:style><style:style style:name="Figure" style:family="paragraph" style:parent-style-name="Standard" style:class="extra"><style:paragraph-properties text:number-lines="false" text:line-number="0" /></style:style><style:style style:name="FigureWithCaption" style:family="paragraph" style:parent-style-name="Figure" style:class="extra"><style:paragraph-properties text:number-lines="false" text:line-number="0" fo:text-align="center" fo:keep-with-next="always" /></style:style>',
		'<text:p text:style-name="FigureCaption">\1<text:sequence text:name="Figure"'
	]
	footnoteRE = /^<\/text:note>$/
	
	fout = []
	linenum = 0
	collapse = false
	nFootnotes = 0
	lines = f.readlines
	lines.each do |line|
		linenum += 1
		if line=~footnoteRE
			collapse = true
			nFootnotes += 1
			line = ''
		else
			renum = 0
			if collapse == true
				line = "<\/text:note>" + line
				puts ">>" + linenum.to_s + ": Collapsed footnote"
			end
			re.each do |regex|
				if line=~regex
					line.gsub!(regex,rep[renum])
					puts ">>>" + linenum.to_s + ":" + renum.to_s + " = " + rep[renum].to_s
				end
				renum += 1
			end
			collapse = false
		end
		fout.push(line)
	end

	puts "# of Collapsable Footnotes: " + nFootnotes.to_s
	puts "TOTAL Lines: " + linenum.to_s
	puts "OUT Lines:" + fout.length.to_s

	newfilename = filename.gsub(/\.fodt/,'PARSE.fodt')
	File.open(newfilename, "w") do |ff|
		puts "Trying to write output to " + newfilename
		fout.each do |line|
			ff.puts(line)
		end
	end

end
